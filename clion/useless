
bool check(string &s,char ch){
    for(auto i:s){
        if(i==ch)return true;
    }
    return false;
}
int test(){
    sockaddr_in addr ={0};
    int sock=socket(AF_INET,SOCK_STREAM,IPPROTO_TCP);

    //清空标签，写上地址和端口号
    //bzero(&server_addr,sizeof(server_addr));
    addr.sin_family = AF_INET;//选择协议族IPV4
    addr.sin_addr.s_addr = INADDR_ANY;//监听本地所有IP
    addr.sin_port = htons(SERVER_PORT);//绑定端口号
    //将标签贴到信箱

    bind(sock, (sockaddr*)&addr, sizeof(addr));
    //挂置于传达室
    listen(sock,0);//(128同时接受信件的数量)
    printf("等待客户端的链接\n");
    sockaddr_in clientAddr;
    int clientAddrSize = sizeof(clientAddr);
    int clientSock;
    FileOperator file;
    while(-1 != (clientSock = accept(sock,(sockaddr*)&clientAddr, (socklen_t*)&clientAddrSize))){
        string requestStr;
        int bufSize = 4096;
        requestStr.resize(bufSize);
        recv(clientSock, &requestStr[0], bufSize, 0);
        cout<<requestStr<<endl;
        string response =
                "HTTP/1.1 200 OK\r\n"
                "Content-Type: text/html; charset=gbk\r\n"
                "Connection: close\r\n"
                "\r\n"
                "{\"Title\":\"123,234\",\"code\":0,\"sum\":2}";
        send(clientSock, response.c_str(), response.length(), 0);
        //处理URL
        close(clientSock);//关闭客户端套接字

        /*
        //处理http请求
        json js;
        json res;
        if(requestStr[0]=='P'){//如果是post
            for(int i=0;i<requestStr.size();i++){
                if(requestStr[i]==13&&requestStr[i+2]==13){
                    requestStr=requestStr.substr(i+4);
                    break;
                }
            }
            if(requestStr[0]=='{'){//json
                cout<<"is_json"<<endl;
                js=json::parse(requestStr,nullptr,false);
            }else if(check(requestStr,'=')){//
                cout<<"is_bd"<<endl;
                int ok=0;
                string key,val;
                for(auto i:requestStr){
                    if(i=='&'){
                        js[key]=val;
                        ok=0;
                        key.clear();val.clear();
                    }else if(i=='='){
                        ok=1;
                    }else{
                        if(ok==0){
                            key+=i;
                        }else{
                            val+=i;
                        }
                    }
                }
                js[key]=val;
            }else{
                js["other"]=requestStr;
            }
        }
        if(js["query"].is_string()){
            if(js["query"]== "1") {
                vector<string>g;
                string url=string(js["user_id"]);
                file.get_dir(file.user_id_to_url(url)+"/problem_list",g);
                res["sum"]=g.size();
                string Title;
                for(int i=0;i<g.size();i++){
                    Title+=g[i];
                    if(i!=g.size()-1)Title+=',';
                }
                res["Title"]=Title;
                res["code"]=0;

            }

        }else if(js["add"].is_string()){

        }else if(js["delete"].is_string()){

        }else if(js["modify"].is_string()){

        }else if(js["download"].is_string()){

        }else if(js["build"].is_string()){

        }else if(js["test"].is_string()){

        }else if(js["test"].is_string()){

        }
        else if(js["register"].is_string()){
            if(js["register"]== "1"){
                string url=file.user_id_to_url(js["user_id"]);
                if(file.exists_dir(url)){
                    //no
                }else{
                    string s="/home/hadoop/DateSpace";
                    string s2=js["user_id"];
                    for(char i:s2){
                        s+='/';
                        s+=i;
                        if(!file.exists_dir(s))file.create_dir(s);
                    }

                    if(file.create_dir(url)){
                        //no
                    }
                    file.create_txt(url+"/user_information.txt");
                    file.create_dir(url+"/problem_list");
                    string tmp1=js["user_id"],tmp2=js["user_password"];
                    string information="user_id "+tmp1+"\nuser_password "+tmp2;
                    file.write_txt(url+"/user_information.txt",information);
                    //yes
                }
            }
        }
        else if(js["login"].is_string()){
            if(js["login"]=="1"){
                string url=file.user_id_to_url(js["user_id"]);
                string password;
                file.read_password(url+"/user_information.txt",password);
                if(js["user_password"]==password){
                    cout<<"yes"<<endl;
                    //yes
                }else{
                    cout<<"no"<<endl;
                    //no
                }
            }

        }
        else{

        }
        string s=res.dump();
        cout<<"ready"<<endl;
        cout<<s<<endl;
        cout<<"wc_len:";
        string main_hear="HTTP/1.0 200 OK\r\nContent-Type: text\r\nConnection: Close\r\n";
        cout<<"wc_len:";
        main_hear+="Content-Length: "+to_string(s.size())+"\r\n\r\n"+s;
        send(sock, main_hear.c_str(), main_hear.size(),0);
        //hp.GCW_write_http(sock,res.dump());
        */
    }
    close(sock);
    return 0;
}
